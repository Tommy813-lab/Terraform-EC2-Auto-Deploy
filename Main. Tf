# ===============================
# PROVIDER CONFIGURATION
# ===============================
provider "aws" {
  region = var.aws_region
}

# ===============================
# SECURITY GROUP: Allow HTTP + SSH from trusted IP
# ===============================
resource "aws_security_group" "web_sg" {
  name        = "charles-web-sg"
  description = "Allow HTTP and SSH from trusted admin IP"
  vpc_id      = var.vpc_id

  ingress {
    description = "Allow SSH from Charles' IP only"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.admin_ip_cidr]
  }

  ingress {
    description = "Allow HTTP from anywhere"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name    = "charles-web-sg"
    Project = "CloudInfraLab"
    Owner   = "Charles Bucher"
    Env     = "Dev"
  }
}

# ===============================
# EC2 INSTANCE: Web server for Charles' project
# ===============================
resource "aws_instance" "web_server" {
  ami                    = var.ami_id
  instance_type          = var.instance_type
  key_name               = var.key_name
  vpc_security_group_ids = [aws_security_group.web_sg.id]
  subnet_id              = var.subnet_id

  user_data = file("scripts/user_data.sh") # Your bootstrap script

  tags = {
    Name    = "charles-web-server"
    Project = "CloudInfraLab"
    Owner   = "Charles Bucher"
    Env     = "Dev"
  }
}

# ===============================
# OUTPUTS
# ===============================
output "web_server_public_ip" {
  description = "Public IP of the EC2 web server"
  value       = aws_instance.web_server.public_ip
}

output "security_group_id" {
  description = "Security group ID for the web server"
  value       = aws_security_group.web_sg.id
}









