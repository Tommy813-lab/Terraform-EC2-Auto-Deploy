📁 scripts/user_data.sh – (Optional EC2 bootstrap script)
This script auto-runs when the EC2 instance boots. It installs Apache and starts a simple HTML homepage.

bash
Copy
Edit
#!/bin/bash

# Update packages
yum update -y

# Install Apache
yum install -y httpd

# Enable and start Apache
systemctl enable httpd
systemctl start httpd

# Simple HTML page
echo "<h1>Deployed via Terraform by Tommy813</h1>" > /var/www/html/index.html
✅ Drop this path in main.tf as:

hcl
Copy
Edit
user_data = file("scripts/user_data.sh")
📁 scripts/terraform_setup.sh – (One-liner Terraform init & deploy)
Use this to streamline setup, especially if you're showing this off in a portfolio demo.

bash
Copy
Edit
#!/bin/bash

# Fail fast
set -e

echo "Initializing Terraform..."
terraform init

echo "Planning deployment..."
terraform plan -out=tfplan

echo "Applying changes..."
terraform apply tfplan
Make executable:

bash
Copy
Edit
chmod +x scripts/terraform_setup.sh
📁 scripts/destroy.sh – (Quick teardown script)
bash
Copy
Edit
#!/bin/bash

echo "Destroying all Terraform-managed infrastructure..."
terraform destroy -auto-approve
📁 scripts/terraform.tfvars – (Optional values override)
You can also create this if you want to separate secrets/configs from variables.tf:

hcl
Copy
Edit
aws_region   = "us-east-1"
ami_id       = "ami-0c02fb55956c7d316"
instance_type = "t2.micro"
key_name     = "my-key"
vpc_id       = "vpc-xxxxxxx"
subnet_id    = "subnet-xxxxxxx"
Then deploy like this:

bash
Copy
Edit
terraform apply -var-file="scripts/terraform.tfvars"









