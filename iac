🛠️ Infrastructure as Code: Terraform EC2 Auto Deploy
By Charles — Aspiring Cloud Engineer

📌 What This Project Does
Automates AWS EC2 instance creation using Terraform — no clicks, all code. Here’s the scoop:

✅ Provisions an EC2 instance
✅ Sets up a security group allowing HTTP (port 80) access
✅ Configures SSH key pair for secure login
✅ Outputs the public IP so you can jump right in

Run one command and boom — your server’s live and ready.

📁 Project Structure
graphql
Copy code
Terraform-EC2-Auto-Deploy/
│
├── main.tf          # Core resources: EC2 instance, Security Group  
├── variables.tf     # Input variables (region, AMI, instance type, key pair)  
├── outputs.tf       # Outputs like public IP  
├── provider.tf      # AWS provider setup  
└── .gitignore       # Ignore Terraform state and sensitive files  
🚀 How to Deploy
Step 1 — Configure AWS CLI

bash
Copy code
aws configure
Step 2 — Initialize Terraform

bash
Copy code
terraform init
Step 3 — Preview the plan

bash
Copy code
terraform plan
Step 4 — Apply your infrastructure

bash
Copy code
terraform apply
Wait about a minute, then get your server’s public IP and connect!

🧠 Why This Matters
Repeatable Deployments: Automate instead of clicking around

Security: Key pairs and security groups set right from code

Version Controlled: Track your infra like your app code

Career Boost: Real-world IaC skills recruiters dig

Whether you’re prepping for your cloud engineer dream job, or building your own sandbox, this project is a solid foundation.

🔧 Tech Stack
Terraform — Your IaC powerhouse

AWS EC2 — The cloud server itself

AWS Security Groups — Your firewall guard

Git & GitHub — Source control and collaboration

🖼️ Architecture Diagram (Mermaid)
mermaid
Copy code
flowchart LR
    CLI[Terraform CLI] -->|Calls AWS API| AWS[AWS Cloud]
    AWS --> EC2[EC2 Instance]
    AWS --> SG[Security Group]
    EC2 --> UD[User Data Script (optional)]
    EC2 --> OUT[Outputs: Public IP]
