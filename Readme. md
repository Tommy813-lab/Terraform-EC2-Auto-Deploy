Terraform EC2 Auto Deploy
By Charles T Bucher â€” Aspiring Cloud Engineer

Project Overview
This project automates provisioning and deployment of AWS EC2 instances using Terraform. Itâ€™s a hands-on example of how Infrastructure as Code (IaC) helps build repeatable, scalable, and secure cloud environments â€” a must-have skill for any modern cloud engineer or DevOps pro.

With this setup, you get simple, flexible EC2 instance creation, security group configuration, and automated initialization using user-data scripts â€” all reducing manual work and human error.

Why This Project Matters
Infrastructure as Code: Manage cloud infrastructure with clean, version-controlled code.

Automation & Scalability: Rapidly deploy consistent EC2 instances with ease.

Security: Set up security groups and SSH key pairs for safe remote access.

Future-Ready: Solid foundation for CI/CD pipeline integration and complex infrastructure.

Architecture Diagram
mermaid
Copy code
flowchart LR
    TerraformCLI["Terraform CLI"]
    AWSAPI["AWS API"]
    EC2Instance["EC2 Instance"]
    SecurityGroups["Security Groups"]
    KeyPair["Key Pair"]
    UserData["User Data Scripts"]

    TerraformCLI --> AWSAPI
    AWSAPI --> EC2Instance
    AWSAPI --> SecurityGroups
    AWSAPI --> KeyPair
    EC2Instance --> UserData
Features
Modular Terraform configs for EC2 provisioning

Flexible parameters (instance type, key pair, AMI)

Security group rules allowing SSH from your IP

Automated user-data scripts for instance setup (optional)

Outputs with instance public IP and DNS

Prerequisites
AWS account with IAM permissions

Terraform installed and configured (v1.0+)

AWS CLI installed and configured (aws configure)

SSH key pair ready for EC2 access

Getting Started
1. Clone the repo
bash
Copy code
git clone https://github.com/Tommy813-lab/Terraform-EC2-Auto-Deploy.git
cd Terraform-EC2-Auto-Deploy
2. Configure variables
Edit variables.tf or create terraform.tfvars with your settings:

hcl
Copy code
instance_type = "t2.micro"
key_name      = "your-ssh-key-name"
allowed_ip    = "your.ip.address/32"
3. Initialize Terraform
bash
Copy code
terraform init
4. Preview changes
bash
Copy code
terraform plan
5. Apply config
bash
Copy code
terraform apply
Confirm with yes to launch the resources.

6. Connect to your instance
Get the public IP:

bash
Copy code
terraform output public_ip
SSH in:

bash
Copy code
ssh -i /path/to/your-key.pem ec2-user@<public_ip>
Cleanup
To remove all resources and avoid charges:

bash
Copy code
terraform destroy
Troubleshooting Tips
Permission Denied (publickey): Make sure your SSH key matches and .pem file permissions are set (chmod 400).

Access Denied: Check AWS IAM user or role permissions.

Security Group Issues: Ensure allowed_ip matches your current IP.

Terraform Errors: Run terraform validate to catch syntax issues.

Future Enhancements
Add automated user-data scripts for app bootstrap

Modularize for multi-environment deployments

Integrate CI/CD pipelines (GitHub Actions, Jenkins)

Add monitoring & alerting with CloudWatch & SNS

Support load balancers and auto scaling groups

Contact
Charles T Bucher (Tommy813-lab)
ðŸ“§ buchercharles2@gmail.com
GitHub Profile

License
MIT License
