Terraform EC2 Auto Deploy
By Charles T Bucher â€” Aspiring Cloud Engineer

Scenario: Launching a Web App Server in AWS
Imagine youâ€™re spinning up a new web application that needs a reliable server in AWS. You want to launch an EC2 instance thatâ€™s:

Secure (SSH access locked down)

Automatically set up with all necessary software

Easy to replicate or scale as demand grows

Doing this manually is error-prone and slow â€” enter Infrastructure as Code with Terraform. This project shows you how to script your entire EC2 deployment so itâ€™s repeatable, secure, and scalable.

Architecture Diagram
mermaid
Copy code
flowchart LR
    User[User Runs Terraform] --> TerraformCLI["Terraform CLI"]
    TerraformCLI --> AWSAPI["AWS API"]
    AWSAPI --> EC2Instance["EC2 Instance"]
    AWSAPI --> SecurityGroups["Security Groups"]
    AWSAPI --> KeyPair["Key Pair"]
    EC2Instance --> UserData["User Data Scripts"]
    EC2Instance --> PublicIP["Public IP Address"]
    User --> SSH["SSH Access"]
How It Works
You run Terraform CLI locally to start provisioning.

Terraform talks to AWS APIs, creating the EC2 instance, security groups, and key pairs based on your config.

Your EC2 instance boots, running user data scripts that install your web server or other software automatically.

Terraform outputs the public IP, so you can SSH into your instance and verify everything is ready.

Why Use This Setup?
Speed: Launch fully configured servers in minutes

Consistency: No manual setup errors or missed steps

Security: Control SSH access and permissions through code

Scalability: Easily spin up multiple servers with the same config

Getting Started
Step 1: Clone the Repo
bash
Copy code
git clone https://github.com/Tommy813-lab/Terraform-EC2-Auto-Deploy.git
cd Terraform-EC2-Auto-Deploy
Step 2: Configure Your Variables
Update variables.tf or create terraform.tfvars:

hcl
Copy code
instance_type = "t2.micro"
key_name      = "your-ssh-key-name"
allowed_ip    = "your.ip.address/32"
Step 3: Initialize and Apply
bash
Copy code
terraform init
terraform apply
Confirm with yes when prompted.

Step 4: Connect
Get your instanceâ€™s IP:

bash
Copy code
terraform output public_ip
SSH in:

bash
Copy code
ssh -i /path/to/your-key.pem ec2-user@<public_ip>
Troubleshooting & Tips
Permission errors? Check SSH key permissions (chmod 400) and matching key names.

Access denied? Confirm your AWS IAM permissions.

Canâ€™t connect? Ensure your IP matches the security groupâ€™s allowed IP.

Validate your config with terraform validate before applying.

Next Steps
Add bootstrap scripts for automated app deployment

Modularize configs for staging and production environments

Integrate with CI/CD pipelines for automated deploys

Add monitoring with CloudWatch and SNS alerts

Contact
Charles T Bucher (Tommy813-lab)
ðŸ“§ buchercharles2@gmail.com
GitHub Profile

License
MIT License
