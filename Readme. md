☁️ ec2-webapp-with-s3-backend
A realistic AWS project simulating a web application hosted on EC2 with S3 as its backend storage. This setup mimics real-world deployments like image galleries, video streamers, or document portals—where your app logic lives on EC2, and all heavy files live in S3. Clean separation of compute and storage, like the pros do it.

📘 Scenario
You’re a Cloud Support Engineer working for a small startup that just launched a lightweight photo-sharing web app.

Problem: the site stores all uploads locally on the EC2 instance.
Now it’s crashing when storage fills up.

Your task: Migrate all user-uploaded files to Amazon S3, refactor the app to read/write from S3, and set IAM permissions tight enough to sleep well at night.

🧱 Architecture Overview
markdown
Copy
Edit
                   ┌────────────────────────┐
                   │   User's Browser       │
                   └──────────┬─────────────┘
                              │ HTTP Request
                              ▼
                    ┌──────────────────┐
                    │  EC2 Web Server  │
                    │  (Flask / Node)  │
                    └──────┬───────────┘
                           │ Uses AWS SDK (Boto3 / AWS SDK)
                           ▼
                  ┌─────────────────────┐
                  │     S3 Bucket       │
                  │  (Images / Files)   │
                  └─────────────────────┘
🚀 What You’ll Learn
Feature	Description
EC2 Setup	Launch, secure, and configure EC2 as a web server
S3 Integration	Store and retrieve files from an S3 bucket
IAM Role for EC2	Use roles instead of access keys (because security matters)
Python Flask Web App	Lightweight backend to upload & list images
Security Best Practices	Least privilege policies + S3 bucket policy

🔧 How to Deploy It
1. 🖥️ Launch EC2 (Amazon Linux 2)
bash
Copy
Edit
aws ec2 run-instances \
  --image-id ami-0abcdef1234567890 \
  --instance-type t2.micro \
  --iam-instance-profile Name=EC2S3AccessRole \
  --key-name MyKeyPair \
  --security-groups my-web-sg
2. ⚙️ Install Flask App + Dependencies
bash
Copy
Edit
sudo yum update -y
sudo yum install python3 git -y
pip3 install flask boto3
git clone https://github.com/Tommy813-lab/ec2-webapp-with-s3-backend
cd ec2-webapp-with-s3-backend
python3 app.py
3. 🪣 Create the S3 Bucket
bash
Copy
Edit
aws s3 mb s3://charles-webapp-uploads
Make it private by default and add a CORS policy if using JS uploads.

4. 🔐 IAM Role for EC2 Access
Attach a policy like this to the EC2 instance role:

json
Copy
Edit
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": ["s3:PutObject", "s3:GetObject", "s3:ListBucket"],
      "Resource": [
        "arn:aws:s3:::charles-webapp-uploads",
        "arn:aws:s3:::charles-webapp-uploads/*"
      ]
    }
  ]
}
🧠 Real-World Use Cases
🖼️ Image/file upload apps

📁 Static site backend storage

🎓 Proof-of-concept for hybrid cloud compute + object storage

🛠️ Foundation for larger web architectures (S3 + Lambda + API Gateway)

📈 Success Criteria
✅ EC2 hosts a working Flask app
✅ Uploads go straight to S3
✅ Users can view file URLs via the app
✅ IAM permissions are scoped securely
✅ Clean, testable architecture

📚 Skills Highlighted
EC2 provisioning & Linux setup

S3 backend integration using AWS SDKs

IAM Role management & security policies

Flask app deployment on AWS

Basic web architecture on AWS

🧑‍💻 About Me
Charles – Future Cloud Engineer, current AWS grinder 🛠️
Learning by building real infrastructure, not clicking around consoles.
GitHub: Tommy813-lab
