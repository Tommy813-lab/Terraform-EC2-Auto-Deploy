# Terraform EC2 Auto Deploy

## Project Overview

This project automates the provisioning and deployment of AWS EC2 instances using Terraform. It showcases how infrastructure-as-code (IaC) enables repeatable, scalable, and maintainable cloud infrastructure deployments â€” a critical skill for modern cloud engineers and DevOps professionals.

By leveraging Terraform, this repo simplifies EC2 instance creation with configurable parameters, security group setup, and automated deployment workflows, eliminating manual errors and improving efficiency.

---

## Why This Project Matters

- **Infrastructure as Code (IaC):** Demonstrates best practices for managing cloud infrastructure with version-controlled code.
- **Automation & Scalability:** Enables rapid, consistent EC2 deployments with minimal manual intervention.
- **Security Focused:** Configures security groups and key pairs for secure SSH access.
- **Foundation for Advanced Workflows:** Lays groundwork for integrating CI/CD pipelines and complex multi-resource infrastructure.

---

## Architecture Diagram

```mermaid
flowchart LR
    A[Terraform CLI] --> B[AWS API]
    B --> C[EC2 Instance]
    B --> D[Security Groups]
    B --> E[Key Pair]
    C --> F[User Data Scripts]
Features
Modular Terraform configuration for EC2 instance provisioning

Parameterized inputs for flexible deployment (instance type, key pair, AMI)

Security group setup allowing SSH from specified IPs

Automated user-data scripts for instance initialization (optional)

Outputs for instance public IP and DNS

Prerequisites
AWS Account with appropriate IAM permissions

Installed and configured Terraform (v1.0+ recommended)

AWS CLI configured (aws configure)

SSH key pair ready for EC2 access

Getting Started
1. Clone the Repository
bash
Copy
Edit
git clone https://github.com/Tommy813-lab/Terraform-EC2-Auto-Deploy.git
cd Terraform-EC2-Auto-Deploy
2. Configure Variables
Edit variables.tf or create a terraform.tfvars file to customize:

hcl
Copy
Edit
instance_type = "t2.micro"
key_name      = "your-ssh-key-name"
allowed_ip    = "your.ip.address/32"
3. Initialize Terraform
bash
Copy
Edit
terraform init
4. Preview Infrastructure Changes
bash
Copy
Edit
terraform plan
5. Apply Terraform Configuration
bash
Copy
Edit
terraform apply
Confirm with yes when prompted. Terraform will provision the EC2 instance and related resources.

6. Connect to Your EC2 Instance
Once deployed, retrieve the instance public IP from Terraform outputs:

bash
Copy
Edit
terraform output public_ip
SSH into your instance:

bash
Copy
Edit
ssh -i /path/to/your-key.pem ec2-user@<public_ip>
Cleanup
To destroy all resources created by Terraform and avoid AWS charges:

bash
Copy
Edit
terraform destroy
Troubleshooting
Permission Denied (publickey): Ensure your SSH key matches the key_name used and .pem file permissions are set (chmod 400).

Access Denied for Terraform: Verify AWS IAM user/role permissions.

Security Group Issues: Make sure allowed_ip matches your current public IP address.

Terraform Errors: Run terraform validate to check configuration syntax.

Future Enhancements
Add automated user-data scripts to bootstrap software on EC2 launch

Modularize Terraform further for multi-environment support

Integrate with CI/CD pipelines (GitHub Actions, Jenkins)

Add monitoring and alerting (CloudWatch, SNS)

Support additional AWS resources (Load Balancers, Auto Scaling)

Contact
Charles T Bucher (Tommy813-lab)
ðŸ“§ buchercharles2@gmail.com
GitHub Profile

License
This project is licensed under the MIT License.

This repo is a practical demonstration of leveraging Terraform for cloud infrastructure automation â€” a crucial capability for any cloud engineerâ€™s toolkit.

yaml
